<?php
/**
 * @file
 * Alter exising forms and create new filter form.
 *
 */

/**
 * Implements hook_form_FORM_ID_alter() for system_modules().
 *
 * Alters the modules form so the permission links for relevant modules will
 * use parameters rather than anchors.
 */
function filter_perms_form_system_modules_alter(&$form, &$form_state, $form_id) {
  // Confirmation page for enabling dependencies will also fire this hook.
  if (isset($form['modules'])) {
    // Replace anchors in links with url parameters so server side processing
    // can happen.
    foreach ($form['modules'] as $group_key => $module_group) {
      if (is_array($module_group)) {
        $modules = element_children($module_group);
        foreach ($modules as $key => $module) {
          if (!empty($form['modules'][$group_key][$module]['links']['#links']['permissions']['fragment'])) {
            $form['modules'][$group_key][$module]['links']['#links']['permissions']['href'] .= '/'. $form['modules'][$group_key][$module]['links']['#links']['permissions']['fragment'];
            unset($form['modules'][$group_key][$module]['links']['#links']['permissions']['fragment']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_permissions().
 */
function filter_perms_form_user_admin_permissions_alter(&$form, $form_state, $form_id) {
  backdrop_add_css(backdrop_get_path('module', 'filter_perms') . '/css/filter_perms.css');

  if (isset($_SESSION['filter_perm_roles']) && count($_SESSION['filter_perm_roles'])) {
    $roles = $_SESSION['filter_perm_roles'];
    // If '--All Roles' is selected, get all roles.
    $is_all_roles = isset($roles['-1']);
  }
  else {
    // Until the session variable is set, display all roles.
    $is_all_roles = TRUE;
  }
  // If '--All Roles' is selected, OR no session variable set, get all roles.
  if ($is_all_roles) {
    $user_roles = user_roles();
    foreach ($user_roles as $user_role_key => $user_role) {
      $roles[$user_role_key] = $user_role_key;
    }
  }

  $cp_field_perms = array();
  if (isset($_SESSION['filter_perm_modules']) && count($_SESSION['filter_perm_modules'])) {
    $modules = $_SESSION['filter_perm_modules'];
    // If '--All Modules' is selected, get all modules.
    $is_all_modules = isset($modules['-1']);
  }
  else {
    // Until the session variable is set, display all modules.
    $is_all_modules = TRUE;
  }
  // If '--All Modules' is selected, OR no session variable set, get all
  // modules.
  if ($is_all_modules) {
    foreach (module_list(FALSE, FALSE, TRUE) as $module) {
      if (module_invoke($module, 'permission')) {
        $modules[$module] = $module;
      }
    }
  }

  $perms = array();
  foreach ($form['permission'] as $perm_key => $perm) {
    if (is_numeric($perm_key)) {
      $perm_module = $perm['#id'];
      $perm_id = $perm_key;
    }
    else {
      if (in_array($perm_module, $modules)) {
        $perms[$perm_module][$perm_key] = $perm_id;
      }
    }
  }
  $old_perms = $form['permission'];
  $old_checkboxes = $form['checkboxes'];
  $old_roles = $form['role_names'];
  $form['permission'] = array();
  $form['checkboxes'] = array();
  $form['role_names'] = array();

  // Count number of permissions so we can test against max_input_vars and
  // give a warning if the current number of checkboxes will exceed.
  $permission_count = 0;

  // If either a role or module is not selected, don't display checkboxes.
  if (count($roles) && count($modules)) {
    $new_roles = array();
    foreach ($old_roles as $rid => $role) {
      if (in_array($rid, $roles)) {
        $new_roles[$rid] = $role;
      }
    }
    $perm_index = 0;
    foreach ($perms as $perm_key => $perm) {

      foreach ($perms[$perm_key] as $perm_name => $perm_value) {
        $form['permission'][$perm_index] = $old_perms[$perm_value];
        $form['permission'][$perm_name] = $old_perms[$perm_name];
        foreach ($new_roles as $rid => $role) {
          $form['checkboxes'][$rid]['#type'] = 'checkboxes';
          $form['checkboxes'][$rid]['#options'][$perm_name] = '';
          $form['checkboxes'][$rid]['#default_value'] = $old_checkboxes[$rid]['#default_value'];
          // Increment the permission counter.
          $permission_count++;
        }
      }
      $perm_index++;
    }
    // Check the number of permission checkboxes against max_input_vars and
    // show a warning and modify the form if the number of checkboxes exceeds
    // it. Although the point at which max_input_vars will be triggered depends
    // on how many checkboxes are checked and permissions changed, we can't
    // know exactly what this will be, so it is safer if we advise filtering
    // before edit, so edits are not lost if the save fails.
    $max_input_vars = (int) ini_get("max_input_vars");
    if ($permission_count > $max_input_vars) {
      // Show a message advising the user to apply one or more filters.
      backdrop_set_message(t('The total number of permissions visible (!count) exceeds the limit set by your PHP configuration (!limit) and therefore the form may not save. Apply one or more filters to reduce the number of permissions in scope.',
        array('!count' => number_format($permission_count),
          '!limit' => number_format($max_input_vars))),
        'warning', FALSE);
      // Remove the save permissions button as the save would fail if the user
      // attempted to save and exceeded max_input_vars.
      unset($form['actions']['submit']);
      // Remove the core search filter box as the user should filter using
      // filter_perms filters first in order for the form to save.
      unset($form['filter']);
    }
    else {
      // Check to see if all roles and all modules are selected.
      if ($is_all_modules && $is_all_roles) {
        // If no filter_perms filter is in use AND max_input_vars is not at
        // risk of being exceeded, then collapse the Filter Permissions form by
        // default.
        backdrop_add_js('$(function() {if ($("#edit-filters").not(".collapsed")) {Backdrop.toggleFieldset($("#edit-filters"));}});', 'inline');
      }
      // Add a description to the core search filter.
      $form['filter']['#description'] = t('This filter does not affect the number of permissions saved.');
    }

    $form['role_names'] = $new_roles;
    foreach ($new_roles as $new_rid => $new_role) {
      $form['role_names']['#value'][$new_rid] = $new_role['#markup'];
    }
    $form['role_names']['#type'] = 'value';
    // No longer need to add a custom submit handler as core appears to handle
    // partial form submits. But we do need to filter $form['roles'] so that the
    // core submit handler doesn't try to assign roles that we've filtered out.
    foreach ($form['roles']['#value'] as $rid => $obj) {
      if (!isset($new_roles[$rid])) {
        unset($form['roles']['#value'][$rid]);
      }
    }
  }
  else {
    // Put some basic info in if filters are not selected.
    $form['permission']['-1'] = array(
      '#markup' => 'Filter Selection',
      '#id' => 'empty',
    );
    $form['permission']['empty'] = array(
      '#type' => 'item',
      '#markup' => t('Please select at least one value from both the Roles and Modules select boxes above and then click the "Filter Permissions" button'),
    );
    // Initialize an empty array to avoid warnings in theme function.
    $form['role_names']['#value'] = array();
    // Remove the Save permissions button when no permissions are present.
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_menu_alter().
 */
function filter_perms_menu_alter(&$callbacks) {
    $callbacks['admin/config/people/permissions']['page callback'] = 'filter_perms_admin_perm';
}

/**
 * Page callback which appends a filter form to the standard
 * user_admin_permissions form.
 */
function filter_perms_admin_perm() {
  $output = array();
  $output['filter_perms_admin_perm_filter'] = backdrop_get_form('filter_perms_admin_perm_filter');
  $output['user_admin_permissions'] = backdrop_get_form('user_admin_permissions');
  return $output;
}

/**
 * Form providing a multiple select for roles and modules for filtering
 * permissions.
 */
function filter_perms_admin_perm_filter() {
  // Retrieve the destination url and parse it into components.
  $url = backdrop_parse_url(request_uri());
  $url_path = $url['path'];
  $url_query = $url['query'];
  // Check whether any query exists in the url.
  $url_query_exists = !empty($url_query);

  // Check for parameters in the URL path.
  $url_parts = explode('/', $url_path);
  $url_last = $url_parts[count($url_parts) - 1];
  // Get all defined roles so we can check if a role parameter is given.
  $roles = user_roles(FALSE, NULL, FALSE);
  // Check if a role parameter exists.
  if (array_key_exists($url_last, $roles)) {
    // Role Ids will come from role page referral so set the session value.
    $_SESSION['filter_perm_roles'] = array($url_last => $url_last);
    // Show selected role for all modules.
    foreach (module_list(FALSE, FALSE, TRUE) as $module) {
      if (module_invoke($module, 'permission')) {
        $_SESSION['filter_perm_modules'][$module] = $module;
      }
    }
  }
  elseif (strstr($url_last, 'module-')) {
    // 'module-' prefix indicates module page referral.
    $single_module = str_replace('module-', '', $url_last);
    // Set the session value with the module.
    $_SESSION['filter_perm_modules'] = array($single_module => $single_module);
    // Show all roles for selected module.
    $user_roles = user_roles();
    foreach ($user_roles as $user_role_key => $user_role) {
      $_SESSION['filter_perm_roles'][$user_role_key] = $user_role_key;
    }
  }

  // If a filter permissions filter has been passed in the URL then we redirect
  // to the page so filters can be changed.
  if ($url_last != 'permissions') {
    // Define the path for permissions page.
    $revised_destination_path = 'admin/config/people/permissions';
    // Check whether any queries have been added to the URL.
    if ($url_query_exists) {
      // Add the queries to the $options array.
      $options = array(
        'query' => $url_query,
      );
    }
    else {
      // Define the blank $options array.
      $options = array();
    }
    // Redirect to the revised destination with any queries intact.
    backdrop_goto($revised_destination_path, $options);

  }
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter Permissions'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Filter Permissions will reduce the number of permissions in scope for saving, which can help avoid issues if you have a large number of permissions. The default text search filter (below) can be used to limit permissions displayed but does not change the number of permissions being saved.'),
  );
  $role_options = user_roles();
  // Displays all user roles.
  $form['filters']['roles'] = array(
    '#title' => t('Roles to display'),
    '#type' => 'select',
    '#options' => array('-1' => '--All Roles') + $role_options,
    '#default_value' => isset($_SESSION['filter_perm_roles']) ? $_SESSION['filter_perm_roles'] : '-1',
    '#size' => 8,
    '#multiple' => TRUE,
  );
  $module_options = array();
  // TRUE for the 3rd parameter forces name sorting instead of by module weight.
  foreach (module_list(FALSE, FALSE, TRUE) as $module) {
    if (module_invoke($module, 'permission')) {
      $module_info = system_get_info('module', $module);
      $module_options[$module] = $module_info['name'];
      backdrop_sort($module_options, array('name' => SORT_STRING));
    }
  }
  // Displays all modules which implement hook_permission().
  $form['filters']['modules'] = array(
    '#title' => t('Modules to display'),
    '#type' => 'select',
    '#options' => array('-1' => '--All Modules') + $module_options,
    '#default_value' => isset($_SESSION['filter_perm_modules']) ? $_SESSION['filter_perm_modules'] : '-1',
    '#size' => 8,
    '#multiple' => TRUE,
  );

  $form['filters']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'));
  return $form;
}

/**
 * Submit handler for filter_perms_admin_perm_filter form.
 */
function filter_perms_admin_perm_filter_submit($form, &$form_state) {
  $_SESSION['filter_perm_roles'] = $form_state['values']['roles'];

  // If Administration Bar or System modules has been selected but not the
  // other we enable the other to allow the permission reminder in core to
  // operate.
  $selected_modules = $form_state['values']['modules'];
  $is_admin_bar = in_array('admin_bar', $selected_modules);
  $is_system = in_array('system', $selected_modules);
  $set_message = FALSE;
  if ($is_admin_bar && !$is_system) {
    $selected_modules[] = 'system';
    $set_message = TRUE;
  }
  if (!$is_admin_bar && $is_system) {
    $selected_modules[] = 'admin_bar';
    $set_message = TRUE;
  }
  if ($set_message) {
    backdrop_set_message(t("Enabling the 'Access administration bar' permission will also require the 'Use the administration pages' permission. Therefore if the Administration Bar module is selected then System module will also be selected and vice versa."),
      'info');
  }
  $_SESSION['filter_perm_modules'] = $selected_modules;
}
